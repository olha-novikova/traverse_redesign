<?php
if (!session_id())
    session_start();
function base_stripe_process_payment() {
	if(isset($_POST['action']) && $_POST['action'] == 'stripe' && wp_verify_nonce($_POST['stripe_nonce'], 'stripe-nonce')) {

		global $stripe_options;
		
		// load the stripe libraries
		require_once(STRIPE_BASE_DIR . '/lib/init.php');

		$current_user = get_current_user_id();
        $current_user_data = get_userdata($current_user);
        $user_name = $current_user_data->first_name." ".$current_user_data->last_name;
        $user_email =  $current_user_data-> user_email;

        if ( $current_user_data->roles[0] == "candidate" ){
            // retrieve the token generated by stripe.js
            $token = $_POST['stripeToken'];

            // check if we are using test mode
            if(isset($stripe_options['test_mode']) && $stripe_options['test_mode']) {

                $secret_key = $stripe_options['test_secret_key'];

            } else {

                $secret_key = $stripe_options['live_secret_key'];

            }
            //retrieve an amount from user
            $amount = trim($_POST['amount']);

            $amount = preg_replace('/[^\d,\.]/', '', $amount);

            $amount = preg_replace('/,(\d{2})$/', '.$1', $amount);

            $amount = $amount * 100; // amount in cents

            $total_for_user = get_user_meta( $current_user, '_available_money', true ); //amount in dollars

            $success = 0;

            $error = '';

            if ( $total_for_user*100 > $amount ){  //in cents, amount should by less then available

                \Stripe\Stripe::setApiKey($secret_key);

                // our platform account
                $account = \Stripe\Account::retrieve();

                $city           = trim( $_POST['address_city'] );
                $country        = trim( $_POST['address_country'] );
                $line1          = trim( $_POST['address_line1'] );
                $line2          = trim( $_POST['address_line2'] );
                $state          = trim( $_POST['address_state'] );
                $zip            = trim( $_POST['address_zip'] );
                $dob_day        = trim( $_POST['dob_day'] );
                $dob_month      = trim( $_POST['dob_month'] );
                $dob_year       = trim( $_POST['dob_year'] );
                $first_name     = trim( $_POST['first_name'] );
                $last_name      = trim( $_POST['last_name'] );
                $last_ssn       = trim( $_POST['last_ssn'] );
                $full_ssn       = trim( $_POST['full_ssn'] );

                try {
                    // create connected account on stripe for user
                    // collect data from form
                    $acct = \Stripe\Account::create(array(
                        "country"       => "US",
                        "type"          => "custom",
                        "email"         => $user_email,
                        "legal_entity"  => array(
                            "address"   => array(
                                "city"      => $city,
                                "country"   => $country,
                                "line1"     => $line1,
                                "line2"     => $line2,
                                "postal_code" => $zip,
                                "state"     => $state
                            ),
                            "dob"           => array(
                                "day"       => $dob_day,
                                "month"     => $dob_month,
                                "year"      => $dob_year
                            ),
                            "personal_id_number" => $full_ssn,
                            "first_name" => $first_name,
                            "last_name"  => $last_name,
                            "ssn_last_4" => $last_ssn,
                            "type"       => "individual"

                        ),
                        'payout_schedule' => array(
                            'interval'  => 'manual'
                        )
                    ));

                    //add credit cart or bank account to user stripe account
                    $card_account = $acct->external_accounts->create(array("external_account" => $token));

                    $acct->tos_acceptance->date = time();
                    $acct->tos_acceptance->ip = $_SERVER['REMOTE_ADDR'];

                    $acct->save();

                    // we need transfer money to user stripe account first
                    if ( isset($stripe_options['test_mode']) && $stripe_options['test_mode'] ){
                        //in test mode we can only use this way to transfer money to connected account
                        $charge = \Stripe\Charge::create(array(
                            'currency' => 'usd',
                            'amount' => $amount,
                            'source' => array(
                                'object' => 'card',
                                'number' => '4000000000000077',
                                'exp_month' => '09',
                                'exp_year' => date('Y') + 3,
                            ),
                            'destination' => array(
                                'account' => $acct->id
                            )
                        ));
                    }else{
                        //in live mode use normal way
                        \Stripe\Transfer::create(
                            array(
                                "amount" => $amount,
                                "currency" => "usd",
                                "destination" => $acct->id
                            ),
                            array("stripe_account" => $account->id)
                        );
                    }

                    // create payout from user account to user credit cart ot bank account
                    $payout = \Stripe\Payout::create(
                        array(
                            'amount'        => $amount,
                            'currency'      => 'usd',
                            "destination"   => $card_account -> id,
                            "description"   => "Cash Out for ".$user_name ."(".$user_email.")",
                            'metadata'      => array(
                                'user'  => $user_name ."(".$user_email.")",
                                'date'  => date('Y/m/d g:i a')
                            )
                        ),
                        array("stripe_account" => $acct->id)
                    );

                    //if payout was success we need add a new influencer_payment with payout response data
                    if ( $payout ){

                        $success = 1;

                        $_SESSION['success'] = 'ok';

                        $redirect = add_query_arg('payment', 'paid', $_POST['redirect']);

                        $new_cashout_post_data = array(
                            'post_title'    => 'New Cash Out to User '.get_current_user_id(),
                            'post_status'   => 'publish',
                            'post_author'   => get_current_user_id(),
                            'post_type'     => 'influencer_payment'
                        );

                        $new_casout_post_id = wp_insert_post( $new_cashout_post_data );

                        update_post_meta($new_casout_post_id,'candidate_id',    $current_user);
                        update_post_meta($new_casout_post_id,'candidate_name',  $user_name);
                        update_post_meta($new_casout_post_id,'cashout_id',      $payout-> id);
                        update_post_meta($new_casout_post_id,'cashout_date',    $payout-> created);
                        update_post_meta($new_casout_post_id,'cashout_summ',    ($payout-> amount)/100);
                        update_post_meta($new_casout_post_id,'cashout_status',  $payout-> status);
                        update_post_meta($new_casout_post_id,'cashout_type',    $payout-> type);

                        update_user_meta($current_user,  '_available_money', $total_for_user - $amount/100 ); // After PayOut was created successful, we need redunce amount from his account

                    }else{

                        $error .= 'Payout was not create for some reason! We are sorry :(';

                    }

                } catch(\Stripe\Error\Card $e) {
                    $body = $e->getJsonBody();
                    $error .='Card Error:<br>';
                    $err  = $body['error'];
                    $error .= $err['message'];

                } catch (\Stripe\Error\RateLimit $e) {
                    $error .='Too many requests made to the API too quickly:<br>';
                    $body = $e->getJsonBody();
                    $err  = $body['error'];
                    $error .= $err['message'];

                } catch (\Stripe\Error\InvalidRequest $e) {
                    $error .='Invalid parameters were supplied to Stripe\'s API:<br>';
                    $body = $e->getJsonBody();
                    $err  = $body['error'];
                    $error .= $err['message'];

                } catch (\Stripe\Error\Authentication $e) {
                    $error .='Authentication with Stripe\'s API failed (maybe you changed API keys recently):<br>';
                    $body = $e->getJsonBody();
                    $err  = $body['error'];
                    $error .= $err['message'];

                } catch (\Stripe\Error\ApiConnection $e) {
                    $error .='Network communication with Stripe failed:<br>';
                    $body = $e->getJsonBody();
                    $err  = $body['error'];
                    $error .= $err['message'];

                } catch (\Stripe\Error\Base $e) {
                    $error .='Display a very generic error to the user, and maybe send yourself an email:<br>';
                    $body = $e->getJsonBody();
                    $err  = $body['error'];
                    $error .= $err['message'];

                } catch (Exception $e) {
                    $error .='Something else happened, completely unrelated to Stripe:<br>';
                }
            }
            else {

                $error .='You can\'t Cash Out $'. ($amount/100).', only $'.$total_for_user.' is available';

            }

            if ( $success != 1 ){

                $_SESSION['error'] = $error;
                $redirect = add_query_arg('payment', 'failed', $_POST['redirect']);

            }
        }

		wp_redirect( $redirect );
        exit;
	}
}
add_action('init', 'base_stripe_process_payment');